#include<stdio.h>
#include<stdlib.h>
  
struct node
{
    int key;
    struct node *left, *right;
};
  
// A utility function to create a new BST node
struct node *newNode(int item)
{
    struct node *temp =  (struct node *)malloc(sizeof(struct node));
    temp->key = item;
    temp->left = temp->right = NULL;
    return temp;
}
  
// A utility function to do inorder traversal of BST
void inorder(struct node *root)
{
    if (root != NULL)
    {
        inorder(root->left);
        printf("%d \n", root->key);
        inorder(root->right);
    }
}
/*Creates a copy of a binary tree (structure + data)*/
struct node * copyTree(struct node *root){
    if(root==NULL)
        return NULL;
    else{
        struct node*temp = (struct node *)malloc(sizeof(struct node));
        temp->key=root->key;
        temp->left=copyTree(root->left);
        temp->right=copyTree(root->right);
        return temp;
    }
}
  
/* A utility function to insert a new node with given key in BST */
struct node* insert(struct node* node, int key)
{
    /* If the tree is empty, return a new node */
    if (node == NULL) return newNode(key);
 
    /* Otherwise, recur down the tree */
    if (key < node->key)
        node->left  = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);   
 
    /* return the (unchanged) node pointer */
    return node;
}

/*Returns mirror image of a binary tree*/
void mirror(struct node *root){
    if(root==NULL)
        return;
    else{
        struct node*temp=root->left;
        root->left=root->right;
        root->right=temp;
        mirror(root->left);
        mirror(root->right);
    }
} 
  
// Driver Program to test above functions
int main()
{
    struct node *root = NULL;
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);
    //Copy BST to new
    struct node *new=copyTree(root);
    // print inoder traversal of the BST
    inorder(root);
    printf("New tree:\n");
    inorder(new);
    //create mirror image of new
    mirror(new);
    printf("After mirror");
    inorder(new);
    return 0;
}
